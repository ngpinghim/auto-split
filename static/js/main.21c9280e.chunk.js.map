{"version":3,"sources":["SourceBox/styles.module.scss","ResultBox/styles.module.scss","logo.svg","SourceBox/index.js","SourceBox/SourceBox.js","ResultBox/index.js","ResultBox/ResultBox.js","App.js","constants/Preferences.js","reportWebVitals.js","index.js"],"names":["module","exports","SourceBox","props","Form","Group","controlId","Label","Control","as","onChange","handleKeyDown","rows","screenWidth","className","styles","textarea","ResultBox","resultText","resultBoxRef","React","useRef","resultArray","sourceText","split","forEach","line","resultLineText","resultLineTextArray","sourceTextDelimited","delimiter","currentCell","word","index","currentWord","length","limit","push","join","splitAndJoinText","ref","onClick","current","select","document","execCommand","value","readOnly","title","App","useState","setSourceText","setLimit","$sourceText","Subject","$limit","window","screen","width","pipe","debounceTime","subscribe","Container","Row","Col","type","placeholder","min","event","next","target","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21c9280e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"styles_textarea__jonPV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"styles_textarea__5eHYE\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import SourceBox from './SourceBox';\r\nexport default SourceBox;\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport styles from './styles.module.scss';\r\n\r\nconst SourceBox = (props) => {\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Form.Group controlId=\"source\">\r\n          <Form.Label>Source</Form.Label>\r\n          <Form.Control as=\"textarea\" onChange={props.handleKeyDown} rows={props.screenWidth >= 576 ? 20 : 5} className={styles.textarea} />\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SourceBox;\r\n","import ResultBox from './ResultBox';\r\nexport default ResultBox;\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport styles from './styles.module.scss';\r\n\r\nconst ResultBox = (props) => {\r\n  const resultBoxRef = React.useRef();\r\n  const resultArray = [];\r\n  let resultText;\r\n\r\n  const splitAndJoinText = (line) => {\r\n    const resultLineTextArray = [];\r\n    const sourceTextDelimited = line.split(props.delimiter);\r\n    let currentCell = '';\r\n\r\n    sourceTextDelimited.forEach((word, index) => {\r\n      const currentWord = (index === 0 ? word : ` ${word}`);\r\n\r\n      if (currentCell.length + currentWord.length > props.limit && index > 0) {\r\n        resultLineTextArray.push(currentCell);\r\n        currentCell = '';\r\n      }\r\n      currentCell += currentWord;\r\n    });\r\n\r\n    if (currentCell.length) {\r\n      resultLineTextArray.push(currentCell);\r\n    }\r\n\r\n    return resultLineTextArray.join('\\t');\r\n  };\r\n\r\n  const handleClick = () => {\r\n    resultBoxRef.current.select();\r\n    document.execCommand('copy');\r\n  };\r\n\r\n  const sourceTextArray = props.sourceText.split('\\n');\r\n  sourceTextArray.forEach(line => {\r\n    const resultLineText = splitAndJoinText(line);\r\n    resultArray.push(resultLineText);\r\n  });\r\n  resultText = resultArray.join('\\n');\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Form.Group controlId=\"result\">\r\n          <Form.Label>Result</Form.Label>\r\n          <Form.Control as=\"textarea\" ref={resultBoxRef} onClick={handleClick} value={resultText} readOnly rows={props.screenWidth >= 576 ? 20 : 5} title=\"Click to copy\" className={styles.textarea} />\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultBox;\r\n","import { useState } from 'react';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport logo from './logo.svg';\nimport './App.css';\nimport { LIMIT, DELIMITER } from './constants/Preferences';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport SourceBox from './SourceBox';\nimport ResultBox from './ResultBox';\n\nfunction App() {\n  const [sourceText, setSourceText] = useState('');\n  const [limit, setLimit] = useState(LIMIT);\n\n  const $sourceText = new Subject();\n  const $limit = new Subject();\n\n  const screenWidth = window.screen.width;\n\n  $sourceText\n    .pipe(debounceTime(500))\n    .subscribe((value) => setSourceText(value));\n\n  $limit\n    // .pipe(debounceTime(500))\n    .subscribe((value) => setLimit(+value || 1));\n\n  const handleLimitChange = (event) => {\n      $limit.next(event.target.value || '');\n    }\n\n  const handleSourceTextChange = (event) => {\n    $sourceText.next(event.target.value || '');\n  }\n\n  return (\n    <Container>\n      <Row>\n        <h1>Text splitter</h1>\n      </Row>\n      <Row>\n        <Col>\n          <Form.Group controlId=\"appMaxLength\">\n            <Form.Label>Max length</Form.Label>\n            <Form.Control type=\"number\" placeholder=\"Max length\" value={limit} min=\"1\" onChange={handleLimitChange} />\n          </Form.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm><SourceBox handleKeyDown={handleSourceTextChange} screenWidth={screenWidth} /></Col>\n        <Col sm><ResultBox sourceText={sourceText} limit={limit} delimiter={DELIMITER} screenWidth={screenWidth} /></Col>\n      </Row>\n    </Container>\n\n  );\n}\n\nexport default App;\n","export const LIMIT = 25;\r\nexport const DELIMITER = ' ';\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}